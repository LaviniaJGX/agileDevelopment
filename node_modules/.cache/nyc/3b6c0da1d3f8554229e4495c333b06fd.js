'use strict';

var cov_18z8gmzjg6 = function () {
  var path = '/Users/dailu/Documents/homework/endback/coursestest/routes/users.js',
      hash = 'dda72db3301071616416c878f3c61956dab20e62',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/dailu/Documents/homework/endback/coursestest/routes/users.js',
    statementMap: {
      '0': {
        start: {
          line: 1,
          column: 14
        },
        end: {
          line: 1,
          column: 32
        }
      },
      '1': {
        start: {
          line: 2,
          column: 13
        },
        end: {
          line: 2,
          column: 29
        }
      },
      '2': {
        start: {
          line: 3,
          column: 11
        },
        end: {
          line: 3,
          column: 36
        }
      },
      '3': {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 31,
          column: 1
        }
      },
      '4': {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 6,
          column: 52
        }
      },
      '5': {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 29,
          column: 3
        }
      },
      '6': {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 17,
          column: 7
        }
      },
      '7': {
        start: {
          line: 19,
          column: 5
        },
        end: {
          line: 26,
          column: 7
        }
      },
      '8': {
        start: {
          line: 20,
          column: 7
        },
        end: {
          line: 24,
          column: 8
        }
      },
      '9': {
        start: {
          line: 21,
          column: 10
        },
        end: {
          line: 21,
          column: 64
        }
      },
      '10': {
        start: {
          line: 23,
          column: 9
        },
        end: {
          line: 23,
          column: 68
        }
      },
      '11': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 34
        }
      },
      '12': {
        start: {
          line: 34,
          column: 0
        },
        end: {
          line: 45,
          column: 1
        }
      },
      '13': {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 44,
          column: 4
        }
      },
      '14': {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      '15': {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 22
        }
      },
      '16': {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 40,
          column: 9
        }
      },
      '17': {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 42,
          column: 20
        }
      },
      '18': {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 46,
          column: 24
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 18
          }
        },
        loc: {
          start: {
            line: 5,
            column: 35
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 5
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 16
          }
        },
        loc: {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 26,
            column: 6
          }
        },
        line: 19
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 34,
            column: 24
          }
        },
        loc: {
          start: {
            line: 34,
            column: 41
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 34
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 35,
            column: 44
          },
          end: {
            line: 35,
            column: 45
          }
        },
        loc: {
          start: {
            line: 35,
            column: 64
          },
          end: {
            line: 44,
            column: 3
          }
        },
        line: 35
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        }, {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        }],
        line: 8
      },
      '1': {
        loc: {
          start: {
            line: 8,
            column: 5
          },
          end: {
            line: 8,
            column: 36
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 8,
            column: 5
          },
          end: {
            line: 8,
            column: 21
          }
        }, {
          start: {
            line: 8,
            column: 23
          },
          end: {
            line: 8,
            column: 36
          }
        }],
        line: 8
      },
      '2': {
        loc: {
          start: {
            line: 20,
            column: 7
          },
          end: {
            line: 24,
            column: 8
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 20,
            column: 7
          },
          end: {
            line: 24,
            column: 8
          }
        }, {
          start: {
            line: 20,
            column: 7
          },
          end: {
            line: 24,
            column: 8
          }
        }],
        line: 20
      },
      '3': {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }],
        line: 36
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var express = (cov_18z8gmzjg6.s[0]++, require('express'));
var router = (cov_18z8gmzjg6.s[1]++, express.Router());
var User = (cov_18z8gmzjg6.s[2]++, require('../models/user'));
/* GET users listing. */
cov_18z8gmzjg6.s[3]++;
router.addUser = function (req, res) {
  cov_18z8gmzjg6.f[0]++;
  cov_18z8gmzjg6.s[4]++;

  res.setHeader('Content-Type', 'application/json');
  // console.log(req.body)
  cov_18z8gmzjg6.s[5]++;
  if ((cov_18z8gmzjg6.b[1][0]++, req.body.account) && (cov_18z8gmzjg6.b[1][1]++, req.body.role)) {
    cov_18z8gmzjg6.b[0][0]++;

    /**
     * role:
     *  1: common
     *  2: admin
     */
    var user = (cov_18z8gmzjg6.s[6]++, new User({
      account: req.body.account,
      role: req.body.role
    }));

    cov_18z8gmzjg6.s[7]++;
    user.save(function (err) {
      cov_18z8gmzjg6.f[1]++;
      cov_18z8gmzjg6.s[8]++;

      if (err) {
        cov_18z8gmzjg6.b[2][0]++;
        cov_18z8gmzjg6.s[9]++;

        res.json({ message: 'User NOT Added!', errmsg: err });
      } else {
        cov_18z8gmzjg6.b[2][1]++;
        cov_18z8gmzjg6.s[10]++;

        res.json({ message: 'User Added Successfully!', data: user });
      }
    });
  } else {
    cov_18z8gmzjg6.b[0][1]++;
    cov_18z8gmzjg6.s[11]++;

    res.json('Wrong Properties!');
  }
};

cov_18z8gmzjg6.s[12]++;
router.findByAccount = function (req, res) {
  cov_18z8gmzjg6.f[2]++;
  cov_18z8gmzjg6.s[13]++;

  User.find({ "account": req.params.account }, function (err, user) {
    cov_18z8gmzjg6.f[3]++;
    cov_18z8gmzjg6.s[14]++;

    if (err) {
      cov_18z8gmzjg6.b[3][0]++;
      cov_18z8gmzjg6.s[15]++;

      res.status(404);
      cov_18z8gmzjg6.s[16]++;
      res.send({
        message: "Invalid account,Do not match!"
      });
    } else {
      cov_18z8gmzjg6.b[3][1]++;
      cov_18z8gmzjg6.s[17]++;

      res.json(user);
    }
  });
};
cov_18z8gmzjg6.s[18]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwicm91dGVyIiwiUm91dGVyIiwiVXNlciIsImFkZFVzZXIiLCJyZXEiLCJyZXMiLCJzZXRIZWFkZXIiLCJib2R5IiwiYWNjb3VudCIsInJvbGUiLCJ1c2VyIiwic2F2ZSIsImVyciIsImpzb24iLCJtZXNzYWdlIiwiZXJybXNnIiwiZGF0YSIsImZpbmRCeUFjY291bnQiLCJmaW5kIiwicGFyYW1zIiwic3RhdHVzIiwic2VuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsa0NBQVVDLFFBQVEsU0FBUixDQUFWLENBQUo7QUFDQSxJQUFJQyxpQ0FBU0YsUUFBUUcsTUFBUixFQUFULENBQUo7QUFDQSxJQUFJQywrQkFBT0gsUUFBUSxnQkFBUixDQUFQLENBQUo7QUFDQTs7QUFDQUMsT0FBT0csT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWNDLEdBQWQsRUFBa0I7QUFBQTtBQUFBOztBQUNqQ0EsTUFBSUMsU0FBSixDQUFjLGNBQWQsRUFBOEIsa0JBQTlCO0FBQ0E7QUFGaUM7QUFHakMsTUFBRywrQkFBSUMsSUFBSixDQUFTQyxPQUFULGdDQUFrQkosSUFBSUcsSUFBSixDQUFTRSxJQUEzQixDQUFILEVBQW1DO0FBQUE7O0FBQ2pDOzs7OztBQUtDLFFBQUlDLCtCQUFPLElBQUlSLElBQUosQ0FBUztBQUNsQk0sZUFBU0osSUFBSUcsSUFBSixDQUFTQyxPQURBO0FBRWxCQyxZQUFNTCxJQUFJRyxJQUFKLENBQVNFO0FBRkcsS0FBVCxDQUFQLENBQUo7O0FBTmdDO0FBV2hDQyxTQUFLQyxJQUFMLENBQVUsVUFBVUMsR0FBVixFQUFjO0FBQUE7QUFBQTs7QUFDdEIsVUFBR0EsR0FBSCxFQUFPO0FBQUE7QUFBQTs7QUFDSlAsWUFBSVEsSUFBSixDQUFTLEVBQUVDLFNBQVMsaUJBQVgsRUFBOEJDLFFBQVNILEdBQXZDLEVBQVQ7QUFDRixPQUZELE1BRUs7QUFBQTtBQUFBOztBQUNIUCxZQUFJUSxJQUFKLENBQVMsRUFBRUMsU0FBUywwQkFBWCxFQUFzQ0UsTUFBS04sSUFBM0MsRUFBVDtBQUNEO0FBRUYsS0FQRDtBQVFGLEdBbkJELE1BbUJLO0FBQUE7QUFBQTs7QUFDSEwsUUFBSVEsSUFBSixDQUFTLG1CQUFUO0FBQ0Q7QUFFRixDQTFCRDs7O0FBNkJBYixPQUFPaUIsYUFBUCxHQUF1QixVQUFVYixHQUFWLEVBQWNDLEdBQWQsRUFBa0I7QUFBQTtBQUFBOztBQUN2Q0gsT0FBS2dCLElBQUwsQ0FBVSxFQUFFLFdBQVVkLElBQUllLE1BQUosQ0FBV1gsT0FBdkIsRUFBVixFQUEwQyxVQUFVSSxHQUFWLEVBQWVGLElBQWYsRUFBb0I7QUFBQTtBQUFBOztBQUM1RCxRQUFJRSxHQUFKLEVBQVM7QUFBQTtBQUFBOztBQUNQUCxVQUFJZSxNQUFKLENBQVcsR0FBWDtBQURPO0FBRVBmLFVBQUlnQixJQUFKLENBQVM7QUFDUFAsaUJBQVM7QUFERixPQUFUO0FBR0QsS0FMRCxNQUtLO0FBQUE7QUFBQTs7QUFDSFQsVUFBSVEsSUFBSixDQUFTSCxJQUFUO0FBQ0Q7QUFDRixHQVREO0FBVUQsQ0FYRDs7QUFZQVksT0FBT0MsT0FBUCxHQUFpQnZCLE1BQWpCIiwiZmlsZSI6InVzZXJzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYWlsdS9Eb2N1bWVudHMvaG9tZXdvcmsvZW5kYmFjay9jb3Vyc2VzdGVzdC9yb3V0ZXMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbnZhciByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xudmFyIFVzZXIgPSByZXF1aXJlKCcuLi9tb2RlbHMvdXNlcicpXG4vKiBHRVQgdXNlcnMgbGlzdGluZy4gKi9cbnJvdXRlci5hZGRVc2VyID0gZnVuY3Rpb24gKHJlcSxyZXMpe1xuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAvLyBjb25zb2xlLmxvZyhyZXEuYm9keSlcbiAgaWYocmVxLmJvZHkuYWNjb3VudCYmcmVxLmJvZHkucm9sZSl7XG4gICAgLyoqXG4gICAgICogcm9sZTpcbiAgICAgKiAgMTogY29tbW9uXG4gICAgICogIDI6IGFkbWluXG4gICAgICovXG4gICAgIHZhciB1c2VyID0gbmV3IFVzZXIoe1xuICAgICAgIGFjY291bnQ6IHJlcS5ib2R5LmFjY291bnQsXG4gICAgICAgcm9sZTogcmVxLmJvZHkucm9sZVxuICAgICB9KVxuXG4gICAgIHVzZXIuc2F2ZShmdW5jdGlvbiAoZXJyKXtcbiAgICAgICBpZihlcnIpe1xuICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogJ1VzZXIgTk9UIEFkZGVkIScsIGVycm1zZyA6IGVycn0pO1xuICAgICAgIH1lbHNle1xuICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiAnVXNlciBBZGRlZCBTdWNjZXNzZnVsbHkhJyxkYXRhOnVzZXJ9KTtcbiAgICAgICB9XG4gICAgICAgIFxuICAgICB9KVxuICB9ZWxzZXtcbiAgICByZXMuanNvbignV3JvbmcgUHJvcGVydGllcyEnKTtcbiAgfVxuIFxufVxuXG5cbnJvdXRlci5maW5kQnlBY2NvdW50ID0gZnVuY3Rpb24gKHJlcSxyZXMpe1xuICBVc2VyLmZpbmQoeyBcImFjY291bnRcIjpyZXEucGFyYW1zLmFjY291bnR9LGZ1bmN0aW9uIChlcnIsIHVzZXIpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDA0KTtcbiAgICAgIHJlcy5zZW5kKHtcbiAgICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIGFjY291bnQsRG8gbm90IG1hdGNoIVwiXG4gICAgICB9KTtcbiAgICB9ZWxzZXtcbiAgICAgIHJlcy5qc29uKHVzZXIpXG4gICAgfVxuICB9KVxufVxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7XG4iXX0=