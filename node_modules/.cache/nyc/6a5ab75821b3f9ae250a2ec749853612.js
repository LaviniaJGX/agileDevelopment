let express = require('express');
let router = express.Router();
var Teacher = require('../models/teacher');

//find all teachers
router.findAll = (req, res) => {
    // Return a JSON representation of our list
    res.setHeader('Content-Type', 'application/json');

    Teacher.find(function (err, teachers) {
        if (err) res.send(err);

        res.send(JSON.stringify(teachers, null, 5));
    });
};

//find certain teacher by id:
router.findById = (req, res) => {

    res.setHeader('Content-Type', 'application/json');

    Teacher.find({ "_id": req.params.id }, function (err, teachers) {
        if (err) {
            res.status(404);
            res.send('Teacher NOT Found!!');
        } else {
            res.send(JSON.stringify(teachers, null, 5));
        }
    });
};

//find certain teacher by its name;
router.findByName = (req, res) => {

    res.setHeader('Content-Type', 'application/json');

    Teacher.find({ "name": req.params.name }, function (err, teachers) {
        if (err) {
            res.send('The teacher you asked to find is NOT EXIST!!');
        } else {
            res.send(JSON.stringify(teachers, null, 5));
        }
    });
};

//find certain teacher which contains certain name elements;
router.containNames = (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    var keyword = req.params.department;
    var reg = new RegExp(keyword, 'i');
    Teacher.find({ 'department': { $regex: reg } }, function (err, teachers) {
        if (err) {
            res.send('Teacher NOT Found!!');
        }
        // return a suitable error message
        else {
                res.send(JSON.stringify(teachers, null, 5));
            }
        // return the donation
    });
};

//add teacher
router.addTeacher = (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    var teacher = new Teacher();

    teacher.name = req.body.name;
    teacher.teacherType = req.body.teacherType;
    teacher.teacherGender = req.body.teacherGender;
    teacher.department = req.body.department;
    teacher.departmentMajor = req.body.departmentMajor;

    teacher.save(function (err) {
        if (err) {
            res.json({ message: 'Teacher NOT Added!' });
        }
        // return a suitable error message
        else {

                res.json({ message: 'Teacher Added Successfully!', data: teacher });
            }
        // return a suitable success message
    });
};

router.changeCertainDepartment = (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    var conditions = { _id: req.params.id },
        update = { department: req.body.department };
    var query = { _id: req.params.id };
    Teacher.update(query, { department: req.body.department }, function (err, teachers) {
        if (err) {
            res.status(404);
            res.json({ message: 'Teacher NOT Found! ', errmsg: err });
        } else {
            res.json('Department changed successfully!');
        }
    });
};

router.changeCertainMajor = (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    var conditions = { _id: req.params.id },
        update = { departmentMajor: req.body.departmentMajor };
    var query = { _id: req.params.id };
    Teacher.update(query, { departmentMajor: req.body.departmentMajor }, function (err, teachers) {
        if (err) {
            res.status(404);
            res.json({ message: 'Teacher NOT Found! ', errmsg: err });
        } else {
            res.json('Major changed successfully!');
        }
    });
};

//delete teacher by its id;
router.deleteTeacherById = (req, res) => {

    Teacher.findByIdAndRemove(req.params.id, function (err) {
        if (err) {
            res.status(404);
            res.json({ message: 'Cant find Teacher, Teacher NOT Deleted!' });
        }
        // return a suitable error message
        else {
                res.json({ message: 'Teacher Deleted successfully!' });
            }
    });
};

module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlYWNoZXIuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJUZWFjaGVyIiwiZmluZEFsbCIsInJlcSIsInJlcyIsInNldEhlYWRlciIsImZpbmQiLCJlcnIiLCJ0ZWFjaGVycyIsInNlbmQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmluZEJ5SWQiLCJwYXJhbXMiLCJpZCIsInN0YXR1cyIsImZpbmRCeU5hbWUiLCJuYW1lIiwiY29udGFpbk5hbWVzIiwia2V5d29yZCIsImRlcGFydG1lbnQiLCJyZWciLCJSZWdFeHAiLCIkcmVnZXgiLCJhZGRUZWFjaGVyIiwidGVhY2hlciIsImJvZHkiLCJ0ZWFjaGVyVHlwZSIsInRlYWNoZXJHZW5kZXIiLCJkZXBhcnRtZW50TWFqb3IiLCJzYXZlIiwianNvbiIsIm1lc3NhZ2UiLCJkYXRhIiwiY2hhbmdlQ2VydGFpbkRlcGFydG1lbnQiLCJjb25kaXRpb25zIiwiX2lkIiwidXBkYXRlIiwicXVlcnkiLCJlcnJtc2ciLCJjaGFuZ2VDZXJ0YWluTWFqb3IiLCJkZWxldGVUZWFjaGVyQnlJZCIsImZpbmRCeUlkQW5kUmVtb3ZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsVUFBVUMsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJQyxTQUFTRixRQUFRRyxNQUFSLEVBQWI7QUFDQSxJQUFJQyxVQUFVSCxRQUFRLG1CQUFSLENBQWQ7O0FBRUE7QUFDQUMsT0FBT0csT0FBUCxHQUFpQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMzQjtBQUNBQSxRQUFJQyxTQUFKLENBQWMsY0FBZCxFQUE4QixrQkFBOUI7O0FBRUFKLFlBQVFLLElBQVIsQ0FBYSxVQUFTQyxHQUFULEVBQWNDLFFBQWQsRUFBd0I7QUFDakMsWUFBSUQsR0FBSixFQUNJSCxJQUFJSyxJQUFKLENBQVNGLEdBQVQ7O0FBRUpILFlBQUlLLElBQUosQ0FBU0MsS0FBS0MsU0FBTCxD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LElBQUlVLE1BQUosQ0FBV0MsRUFBbEIsRUFBWjtBQUNBYixZQUFRb0MsTUFBUixDQUFlQyxLQUFmLEVBQXNCLEVBQUVULGlCQUFpQjFCLElBQUl1QixJQUFKLENBQVNHLGVBQTVCLEVBQXRCLEVBQW1FLFVBQVV0QixHQUFWLEVBQWVDLFFBQWYsRUFBeUI7QUFDeEYsWUFBSUQsR0FBSixFQUFRO0FBQ0pILGdCQUFJVyxNQUFKLENBQVcsR0FBWDtBQUNBWCxnQkFBSTJCLElBQUosQ0FBUyxFQUFDQyxTQUFRLHFCQUFULEVBQWdDTyxRQUFTaEMsR0FBekMsRUFBVDtBQUNILFNBSEQsTUFJSztBQUNESCxnQkFBSTJCLElBQUosQ0FBUyw2QkFBVDtBQUNIO0FBQ0osS0FSRDtBQVNILENBYkQ7O0FBZ0JBO0FBQ0FoQyxPQUFPMEMsaUJBQVAsR0FBMkIsQ0FBQ3RDLEdBQUQsRUFBTUMsR0FBTixLQUFjOztBQUVyQ0gsWUFBUXlDLGlCQUFSLENBQTBCdkMsSUFBSVUsTUFBSixDQUFXQyxFQUFyQyxFQUF5QyxVQUFTUCxHQUFULEVBQWM7QUFDbkQsWUFBSUEsR0FBSixFQUFRO0FBQ0pILGdCQUFJVyxNQUFKLENBQVcsR0FBWDtBQUNBWCxnQkFBSTJCLElBQUosQ0FBUyxFQUFFQyxTQUFTLHlDQUFYLEVBQVQ7QUFDSDtBQUNEO0FBSkEsYUFLSTtBQUNBNUIsb0JBQUkyQixJQUFKLENBQVMsRUFBRUMsU0FBUywrQkFBWCxFQUFUO0FBQ0g7QUFFSixLQVZEO0FBV0gsQ0FiRDs7QUFnQkFXLE9BQU9DLE9BQVAsR0FBaUI3QyxNQUFqQiIsImZpbGUiOiJ0ZWFjaGVyLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYWlsdS9Eb2N1bWVudHMvaG9tZXdvcmsvZW5kYmFjay9jb3Vyc2VzdGVzdC9yb3V0ZXMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmxldCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xudmFyIFRlYWNoZXIgPSByZXF1aXJlKCcuLi9tb2RlbHMvdGVhY2hlcicpO1xuXG4vL2ZpbmQgYWxsIHRlYWNoZXJzXG5yb3V0ZXIuZmluZEFsbCA9IChyZXEsIHJlcykgPT4ge1xuICAgIC8vIFJldHVybiBhIEpTT04gcmVwcmVzZW50YXRpb24gb2Ygb3VyIGxpc3RcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gICAgVGVhY2hlci5maW5kKGZ1bmN0aW9uKGVyciwgdGVhY2hlcnMpIHtcbiAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgIHJlcy5zZW5kKGVycik7XG5cbiAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkodGVhY2hlcnMsbnVsbCw1KSk7XG4gICAgfSk7XG59XG5cbi8vZmluZCBjZXJ0YWluIHRlYWNoZXIgYnkgaWQ6XG5yb3V0ZXIuZmluZEJ5SWQgPSAocmVxLCByZXMpID0+IHtcblxuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgICBUZWFjaGVyLmZpbmQoeyBcIl9pZFwiIDogcmVxLnBhcmFtcy5pZCB9LGZ1bmN0aW9uKGVyciwgdGVhY2hlcnMpIHtcbiAgICAgICAgaWYgKGVycil7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCk7XG4gICAgICAgICAgICByZXMuc2VuZCgnVGVhY2hlciBOT1QgRm91bmQhIScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICByZXMuc2VuZChKU09OLnN0cmluZ2lmeSh0ZWFjaGVycyxudWxsLDUpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vL2ZpbmQgY2VydGFpbiB0ZWFjaGVyIGJ5IGl0cyBuYW1lO1xucm91dGVyLmZpbmRCeU5hbWUgPSAocmVxLCByZXMpID0+IHtcblxuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgICBUZWFjaGVyLmZpbmQoeyBcIm5hbWVcIiA6IHJlcS5wYXJhbXMubmFtZSB9LGZ1bmN0aW9uKGVyciwgdGVhY2hlcnMpIHtcbiAgICAgICAgaWYgKGVycil7XG4gICAgICAgICAgICByZXMuc2VuZCgnVGhlIHRlYWNoZXIgeW91IGFza2VkIHRvIGZpbmQgaXMgTk9UIEVYSVNUISEnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkodGVhY2hlcnMsbnVsbCw1KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cblxuLy9maW5kIGNlcnRhaW4gdGVhY2hlciB3aGljaCBjb250YWlucyBjZXJ0YWluIG5hbWUgZWxlbWVudHM7XG5yb3V0ZXIuY29udGFpbk5hbWVzID0gKHJlcSwgcmVzKSA9PntcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgIHZhciBrZXl3b3JkID0gcmVxLnBhcmFtcy5kZXBhcnRtZW50O1xuICAgIHZhciByZWc9bmV3IFJlZ0V4cChrZXl3b3JkLCdpJyk7XG4gICAgVGVhY2hlci5maW5kKHsnZGVwYXJ0bWVudCc6eyRyZWdleDogcmVnfSB9LGZ1bmN0aW9uKGVyciwgdGVhY2hlcnMpIHtcbiAgICAgICAgaWYgKGVycil7XG4gICAgICAgICAgICByZXMuc2VuZCgnVGVhY2hlciBOT1QgRm91bmQhIScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBhIHN1aXRhYmxlIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHJlcy5zZW5kKEpTT04uc3RyaW5naWZ5KHRlYWNoZXJzLG51bGwsNSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiB0aGUgZG9uYXRpb25cbiAgICB9KTtcbn1cblxuXG4vL2FkZCB0ZWFjaGVyXG5yb3V0ZXIuYWRkVGVhY2hlciA9IChyZXEsIHJlcykgPT4ge1xuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgdmFyIHRlYWNoZXIgPSBuZXcgVGVhY2hlcigpO1xuXG4gICAgdGVhY2hlci5uYW1lID0gIHJlcS5ib2R5Lm5hbWU7XG4gICAgdGVhY2hlci50ZWFjaGVyVHlwZSA9IHJlcS5ib2R5LnRlYWNoZXJUeXBlO1xuICAgIHRlYWNoZXIudGVhY2hlckdlbmRlciA9IHJlcS5ib2R5LnRlYWNoZXJHZW5kZXI7XG4gICAgdGVhY2hlci5kZXBhcnRtZW50ID0gcmVxLmJvZHkuZGVwYXJ0bWVudDtcbiAgICB0ZWFjaGVyLmRlcGFydG1lbnRNYWpvciA9IHJlcS5ib2R5LmRlcGFydG1lbnRNYWpvcjtcblxuICAgIHRlYWNoZXIuc2F2ZShmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgaWYgKGVycil7XG4gICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6ICdUZWFjaGVyIE5PVCBBZGRlZCEnfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIGEgc3VpdGFibGUgZXJyb3IgbWVzc2FnZVxuICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6ICdUZWFjaGVyIEFkZGVkIFN1Y2Nlc3NmdWxseSEnLGRhdGE6dGVhY2hlcn0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBhIHN1aXRhYmxlIHN1Y2Nlc3MgbWVzc2FnZVxuICAgIH0pO1xufVxuXG5yb3V0ZXIuY2hhbmdlQ2VydGFpbkRlcGFydG1lbnQgPShyZXEscmVzKSA9PiB7XG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICB2YXIgY29uZGl0aW9ucyA9IHsgX2lkOiByZXEucGFyYW1zLmlkIH0gLCB1cGRhdGUgPSB7ICBkZXBhcnRtZW50OiByZXEuYm9keS5kZXBhcnRtZW50IH07XG4gICAgdmFyIHF1ZXJ5ID0geyBfaWQ6IHJlcS5wYXJhbXMuaWQgfTtcbiAgICBUZWFjaGVyLnVwZGF0ZShxdWVyeSwgeyBkZXBhcnRtZW50OiByZXEuYm9keS5kZXBhcnRtZW50fSxmdW5jdGlvbiAoZXJyLCB0ZWFjaGVycykge1xuICAgICAgICBpZiAoZXJyKXtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KTtcbiAgICAgICAgICAgIHJlcy5qc29uKHttZXNzYWdlOidUZWFjaGVyIE5PVCBGb3VuZCEgJywgZXJybXNnIDogZXJyfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMuanNvbignRGVwYXJ0bWVudCBjaGFuZ2VkIHN1Y2Nlc3NmdWxseSEnKTtcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbnJvdXRlci5jaGFuZ2VDZXJ0YWluTWFqb3IgPShyZXEscmVzKSA9PiB7XG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICB2YXIgY29uZGl0aW9ucyA9IHsgX2lkOiByZXEucGFyYW1zLmlkIH0gLCB1cGRhdGUgPSB7ICBkZXBhcnRtZW50TWFqb3I6IHJlcS5ib2R5LmRlcGFydG1lbnRNYWpvciB9O1xuICAgIHZhciBxdWVyeSA9IHsgX2lkOiByZXEucGFyYW1zLmlkIH07XG4gICAgVGVhY2hlci51cGRhdGUocXVlcnksIHsgZGVwYXJ0bWVudE1ham9yOiByZXEuYm9keS5kZXBhcnRtZW50TWFqb3J9LGZ1bmN0aW9uIChlcnIsIHRlYWNoZXJzKSB7XG4gICAgICAgIGlmIChlcnIpe1xuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpO1xuICAgICAgICAgICAgcmVzLmpzb24oe21lc3NhZ2U6J1RlYWNoZXIgTk9UIEZvdW5kISAnLCBlcnJtc2cgOiBlcnJ9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcy5qc29uKCdNYWpvciBjaGFuZ2VkIHN1Y2Nlc3NmdWxseSEnKTtcbiAgICAgICAgfVxuICAgIH0pXG59XG5cblxuLy9kZWxldGUgdGVhY2hlciBieSBpdHMgaWQ7XG5yb3V0ZXIuZGVsZXRlVGVhY2hlckJ5SWQgPSAocmVxLCByZXMpID0+IHtcblxuICAgIFRlYWNoZXIuZmluZEJ5SWRBbmRSZW1vdmUocmVxLnBhcmFtcy5pZCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpe1xuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpO1xuICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiAnQ2FudCBmaW5kIFRlYWNoZXIsIFRlYWNoZXIgTk9UIERlbGV0ZWQhJ30pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBhIHN1aXRhYmxlIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogJ1RlYWNoZXIgRGVsZXRlZCBzdWNjZXNzZnVsbHkhJ30pO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjsiXX0=